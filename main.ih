#include <iostream>
#include <string>
#include <fstream> // this is to open text files
#include <sstream> // to use isstringstream functionality
#include <vector>
#include <iomanip> // to keep the format of numbers right
#include <cmath> // for round in binTimeInterval, and ceil in interpolation

namespace Icmbuild
{
    extern char version[];
    extern char years[];
    extern char author[];
};

void usage(std::string const &progname);

using namespace std;

// class declarations
#include "../extractEyeTrackingData/dataline/dataline.h"
// #include "../extractEyeTrackingData/trialinfo/trialinfo.h"
#include "trialinfo/trialinfo.h"
#include "../extractEyeTrackingData/interpdata/interpdata.h"

struct files {
	string TrialInfoFile;
	string nameInterpolationFile; 
};

// string checkBlinksAndGetInterpBounds(string filename, string nameInterpolationFile, string& lock2);
files checkBlinksAndGetInterpBounds(files filenames, string& lock2, size_t nLines2interpolate);
void checkInterpolations(files filenames);

double vectorMedian(vector<double> dataArray);

// size_t processData(string trialInfoFile, string filename, size_t timeBefore,
// 									 string& lock2, size_t limit4extraction, string& filePrefix);
size_t newProcessData(files filenames, string filename, 
									 size_t timeBefore, string& lock2, 
									 size_t limit4extraction, string& filePrefix);

// Interpdata currentInterpInfo(TrialInfo trialSet, files filenames);

TrialInfo interpolateBlinks(ifstream& trialInfoFile, ifstream& eyetrackingFile, 
														ofstream& outputfile, TrialInfo trialSet, Dataline preBlink, 
														Interpdata interpolation, string& lock2);
// TrialInfo interpolateBlinks(ifstream& trialInfoFile, ifstream& eyetrackingFile, 
// 														ofstream& outputfile, TrialInfo trialSet, Dataline preBlink, string& lock2);
// 
bool interpolateLongBlinks(ofstream& outputfile, TrialInfo trialSet, Interpdata interpolation);

size_t interpolateShortBlinks(ofstream& outputfile, TrialInfo trialSet, Dataline preBlink, 
															Dataline postBlink, size_t lines2interp);

double linearInterpolate(double y1, double y2, double mu);

void writeOut(Dataline eye, ofstream& outputfile, TrialInfo trialSet);

size_t binData(string filename, size_t lines2bin);
double vectorMean(vector<double> values);

size_t average200BeforeVisualOnset(string filename, size_t interval4baseline, string& line2search);
size_t averageFirst200(string filename, size_t interval4baseline, string& lock2);
void exportBaseline(vector<double> psize, string subID, string trialNum, ofstream& outputfile);

Interpdata updateInterpolation(Interpdata interpolation, TrialInfo trialSet, 
															 string& line, ifstream& interpInfo);

// // void baselineOne();
// double findMatchingBaseline(string& pp, size_t trial, ifstream& baselineFile);
// // void baselineTwo();
// double findMatchingPp(string& pp, ifstream& baselineFile);
// // void baselineOneAndTwo(string& outputfileName);
double matchBaselines(string& pp, size_t trial, string baseline2read);

// void ERDD_withBase123(string& outputfileName, size_t timeBefore);
void ERDD_withBase123(string& filePrefix, string& outputfileName, size_t timeBefore, size_t baselineInt);
size_t baselineBeforeTarget(string filename, string& eye2read, size_t interval4baseline);
string eliminateRedundantTrials(files filenames);

size_t extractSaccades(string TrialInfoFile, string filename, string& lock2);

void exportInterpolation(string&	nameInterpolationFile, double blinkDuration, 
		TrialInfo trialSet, double tVect, double xVect, double yVect, double pVect, 
		double medianT, double medianX, double medianY, double medianP); //, char type);
// void exportInterpolation(string&	nameInterpolationFile, double blinkDuration, 
// 			TrialInfo trialSet, double tVect, double xVect, double yVect, double pVect, 
// 			double medianT, double medianX, double medianY, double medianP, 
// 			const char *type);

